## About

In this report, you'll find some data on the usage of the online training "Privacy Basics for Researchers". This online module was created by Research Data Management Support at Utrecht University (NL) to provide a researcher-friendly introduction into the General Data Protection Regulation (GDPR), with a focus on how it applies to scientific research performed at Utrecht University (UU).

A description of and a registration link to the online module can be found on the [RDM Support website](https://www.uu.nl/en/research/research-data-management/walk-in-hours-workshops/privacy-basics-online-training). The module is embedded within the Utrecht University Moodle platform, "ULearning", but the raw module materials are also available [online via Zenodo](https://doi.org/10.5281/zenodo.7930571).

## Getting, reading and cleaning the data

### Downloading the data

To obtain the data for this report from the ULearning platform, the following steps should be followed by a teacher/administrator in the ULearning platform:

##### 1. List of enrolled participants

1.  From course main page, go to Participants.
2.  Set the following selection criteria: Match *All* of the following
    -   Match ANY Roles: Student, Guest, Authenticated user, Authenticated user on site home AND
    -   Match None Groups: Red
3.  Click "Apply filters"
4.  Select all users
5.  Under "With selected users...", select "Comma-separated values (.csv)"
6.  Save the file in the `raw` folder. Add the date of downloading in the downloaded csv file "YYYYMMDD_courseid_838_participants.csv"

##### 2. Progress report

1.  From course main page, go to Reports -> Activity completion
2.  Download the file to the spreadsheet format (UTF-8 .csv)
3.  Save the file in the `raw` folder. Add the date of downloading in the downloaded csv file "YYYYMMDD_progress.pbfr.csv"

##### 3. Quiz results

1.  From course main page, go to Chapter 6 | Closing -> Final Quiz
2.  Click "Attempts: [##]" (The ## indicating the number of attempts)
3.  Under What to include in the report, select:
    -   Attempts from enrolled users who have attempted the quiz
    -   Attempts that are In progress, Overdue, Finished, and Never submitted
    -   Check Show at most one finished attempt per user (Highest grade)
4.  Under Display options:
    -   Make sure Page size is larger than the amount of attempts.
    -   Marks for each question: Yes
5.  Click Show report.
6.  Select all participants using the checkbox above the first name in the list.
7.  Download the data as Comma separated values (.csv)
8.  Save the file in the `raw` folder as "YYYYMMDD_PBfR-Quiz.csv".

The data are not shared because they contain personal data (e.g., names, email addresses and information about participants' progress in the module).

### Reading and cleaning the data

We first have to read and clean the data to get usable data frames. We don't want to include people who were involved in the creation of the course or who provided feedback on it; we only need the actual users; people who enrolled after the launch of the course with the intention to actually learn something new!

```{r load-packages}
#| code-summary: "See code to load packages"
library(tidyverse)
library(ggplot2)
library(data.table)
library(kableExtra)
```

```{r styling}
#| code-summary: "See code to style graphs"

# Styling copied from the Data Privacy Survey plots
# R color brewers palettes: http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/
# UU colors: https://www.uu.nl/en/organisation/corporate-identity/brand-policy/colour
UU_pallette <- c(
  "#FFE6AB", # Lighter yellow
  "#F3965E", # Orange
  "#AA1555", # Bordeaux-red
  "#6E3B23", # Brown
  "#24A793", # Green
  "#5287C6", # Blue
  "#001240", # Dark blue
  "#5B2182", # Purple
  "#FFCD00" # UU yellow
  )

uucol <- "#FFCD00"

styling <- list(
  theme_classic(),
  scale_fill_manual(values = UU_pallette),
  theme(legend.text = element_text(size = 10),
        legend.position = "bottom",
        legend.title = element_blank(),
        axis.title.x = element_text(size = 11),
        #axis.line = element_blank(),
        #axis.text.x = element_blank(),
        axis.text.y = element_text(size = 11),
        axis.ticks = element_blank(),
        panel.background = element_blank(),
        panel.border=element_blank(),
        panel.grid.major=element_blank(),
        panel.grid.minor=element_blank(),
        plot.background=element_blank())
)
```

```{r read-all-data}
#| code-summary: "See code to read all data files"
# List all the files in the raw folder including their date
data_files <- data.frame(filename = list.files(path = "raw", pattern = ".csv"))
data_files$filenamedates <- as.Date(str_extract(pattern = "[0-9]+[0-9]+[0-9]+", 
                                                string = data_files$filename),
                                    format = "%Y%m%d")

# Sort by date using data.table::setorder (ascending = most recent file last)
setorder(data_files, filenamedates, na.last = TRUE)

# Select all files of every type (participants, progress or quiz)
participants_files <- data_files %>% filter(str_detect(filename, 
                                                       "courseid_838_participants"))
progress_files <- data_files %>% filter(str_detect(filename, 
                                                   "progress"))
quiz_files <- data_files %>% filter(str_detect(filename, 
                                               "PBfR-Quiz"))

# Function to read in files from the file list and put the dataframes in a list
# with the date as the dataframe / list item name
readfiles <- function(filesvar){
  dataset <- list()
  dataset <- lapply(filesvar$filename, 
                    function(file){
                      read.csv(paste0("raw/", file), header = TRUE)
                      }
                    )
  names(dataset) <- filesvar$filenamedates
  return(dataset)
}

# Read in the participant, progress and quiz files
participants_list <- readfiles(participants_files)
progress_list <- readfiles(progress_files)
quiz_list <- readfiles(quiz_files)
```

```{r select-actual-users}
#| code-summary: "See code to select only relevant participants"

# Filter the most recent dataframe to only contain the correct participants
# i.e. only people who were *not* involved in the creation or reviewing of the
# course; these people are labelled as "Red" in the Groups variable
most_recent_dataframe  <- participants_list[[length(participants_list)]] %>% 
        filter(!(Groups == "Red" & !is.na(Groups)))

# Function to filter the old participants dataframes, and the progress and quiz 
# dataframes, based on the most recent participants list
filterlist <- function(list_to_be_filtered){
  lapply(list_to_be_filtered, 
         function(df){
           filtered_df <- df %>% semi_join(select(most_recent_dataframe, 
                                                  Email.address))
           return(filtered_df)
         })
}

participants_list_filtered <- filterlist(participants_list)
progress_list_filtered <- filterlist(progress_list)
quiz_list_filtered <- filterlist(quiz_list)
```

## Number of participants

```{r n-participants}
#| code-summary: "See code to calculate the number of participants"

# Initialize empty dataframe to be filled in the for-loop
vectorlength = length(participants_list_filtered)
nr_participants <- data.frame(date = vector(length = vectorlength),
                              total = vector(length = vectorlength),
                              uu = vector(length = vectorlength),
                              uu_students = vector(length = vectorlength),
                              other = vector(length = vectorlength))

# For each dataframe in the participants list
for(dataframe in 1:vectorlength){
  
  # Put the date in the date column of nr_participants dataframe
  nr_participants$date[dataframe] <- names(participants_list_filtered[dataframe])
  
  # Calculate total number of participants, and UU and UU students
  nr_participants$total[dataframe] <- dim(participants_list_filtered[[dataframe]])[1]
  nr_participants$uu[dataframe] <- sum(grepl("@uu.nl$", 
                                             participants_list_filtered[[dataframe]]$Email.address))
  nr_participants$uu_students[dataframe] <- sum(grepl("@students.uu.nl$", 
                                             participants_list_filtered[[dataframe]]$Email.address))
  
  # Nr of other people = total - UU - UU_students
  nr_participants$other[dataframe] <- nr_participants$total[dataframe] - nr_participants$uu[dataframe] - nr_participants$uu_students[dataframe]
}
```

<!-- As of `r nr_participants$date[length(nr_participants)]`, there are `r nr_participants$total[length(nr_participants)]` participants enrolled in the course. `r nr_participants$uu[length(nr_participants)]` of them are enrolled with their "@uu.nl" email address, and `r nr_participants$uu_students[length(nr_participants)]` of them with the "@students.uu.nl" email address. `r nr_participants$other[length(nr_participants)]` participants are either from an external institution or have used a personal email address to enroll in the course. -->

In the below bar chart, you can see the development of the number of participants in the course over time.

```{r plot-participants}
#| code-summary: "See code to plot the participants over time "

# From wide to long
nr_participants_long <- pivot_longer(data = nr_participants, 
                                    cols = c(uu, uu_students, other)
                                    #names_to = "variable",
                                    #values_to = "value"
                                    )

# Convert the "date" column to a proper date format
nr_participants_long$date <- as.Date(nr_participants_long$date)

# Set the order of the variable levels
nr_participants_long$name <- factor(nr_participants_long$name, levels = c("uu", "uu_students", "other"))

# Create a stacked bar plot
ggplot(nr_participants_long, aes(x = date, y = value, fill = name)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = after_stat(y), group = date), 
            vjust = -0.5, color = "black", size = 3.5) + 
  labs(title = "Course participants over time",
       x = "Date", y = "Number of participants",
       fill = "Type of participant") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  + # Adjust x-axis labels for better readability
  styling +
  scale_fill_discrete(name = "Group", 
                      labels = c("uu" = "UU staff", 
                                 "uu_students" = "UU students", 
                                 "other" = "Others"))
```

## Participants' progress

Below you can see the average progress per group of participants for each block in the course as of `r names(progress_list_filtered[length(progress_list_filtered)])`.

```{r plot-latest-progress}
#| code-summary: "See code to plot latest progress per chapter and group"

# Copy progress object to make further edits/cleaning
progress_list_cleaned <- progress_list_filtered

# Clean up the progress dataframes
for(dataframe in 1:length(progress_list_cleaned)){
  
  # Delete columns we won't use and turn character completion into numeric 0 or 1
  progress_list_cleaned[[dataframe]] <- progress_list_cleaned[[dataframe]] %>%
    select(-starts_with("X")) %>%
    mutate_at(vars(-Email.address), ~ifelse(. == "Completed", 1, 0))
  
  # Create a factor variable for group membership (UU, student or other)
  progress_list_cleaned[[dataframe]]$group <- as.factor(ifelse(grepl("@uu.nl$", 
                                                                     progress_list_cleaned[[dataframe]]$Email.address), 
                                                               "uu",
                                                               ifelse(grepl("@students.uu.nl$",
                                                                            progress_list_cleaned[[dataframe]]$Email.address),
                                                                      "uu_students",
                                                                      "other")))
}

# Select the latest progress file
latest_progress_df <- progress_list_cleaned[[length(progress_list_cleaned)]]

# Set the order of the variable levels
latest_progress_df$group <- factor(latest_progress_df$group, levels = c("uu", "uu_students", "other"))

# Group blocks into sections for easier visualization
latest_progress_long <- latest_progress_df %>%
  pivot_longer(cols = -c(Email.address, group), 
               names_to = "block", 
               values_to = "completion") %>%
  mutate(chapter = ifelse(startsWith(block, "Welcome") | 
                            startsWith(block, "Introduction.to.Personal.Data.under.the.GDPR") | 
                            startsWith(block, "GDPR") | 
                            startsWith(block, "What.is.Personal.Data") | 
                            startsWith(block, "Special.Categories.of.Personal.Data") |
                            startsWith(block, "Roles.in.the.GDPR"),
                          "Chapter 1", ifelse(
                            startsWith(block, "Introduction.to.Lawfulness") |
                              startsWith(block, "Legal.Basis.for.Processing.Data") |
                              startsWith(block, "Public.Interest") |
                              startsWith(block, "Consent") |
                              startsWith(block, "How.to.Inform.Data.Subjects") |
                              startsWith(block, "Data.Subject.Rights"),
                            "Chapter 2", ifelse(
                              startsWith(block, "Introduction.to.Planning.Your.Project") |
                                startsWith(block, "Privacy.by.Design.and.Privacy.by.Default") |
                                startsWith(block, "Demonstrating.Compliance") |
                                startsWith(block, "Privacy.Scan.and.DPIA") |
                                startsWith(block, "Common.Privacy.Risks") |
                                startsWith(block, "Reporting.a.Data.Breach"),
                              "Chapter 3", ifelse(
                                startsWith(block, "Introduction.to.Practical.Measures") |
                                  startsWith(block, "Levels.of.Data.Security") |
                                  startsWith(block, "Access.Control") |
                                  startsWith(block, "Encryption") |
                                  startsWith(block, "Pseudonymisation.and.Anonymisation") |
                                  startsWith(block, "De.identification.in.Practice") |
                                  startsWith(block, "Processing.Tools"),
                                "Chapter 4", ifelse(
                                  startsWith(block, "Introduction.to.Storing.and.Sharing.Personal.Data") |
                                    startsWith(block, "Storing.Personal.Data") |
                                    startsWith(block, "Agreements.in.Research") |
                                    startsWith(block, "Sharing.Personal.Data") |
                                    startsWith(block, "Making.Personal.Data.FAIR"),
                                  "Chapter 5", ifelse(
                                    startsWith(block, "Final.Quiz") |
                                      startsWith(block, "Evaluate.this.course"),
                                    "Chapter 6", "Not assigned"
                                  )
                                )
                              )
                            )
                          )
  )
  )

# Plot average progress score (per person) per section per group 
latest_progress_long %>%
  group_by(Email.address, chapter, group) %>%
  summarise(avg_completion_rate = mean(completion)) %>%
  ggplot(aes(x = chapter, 
             y = avg_completion_rate*100, 
             fill = group)) +
  #  geom_col(colour="black",width=0.5,    
  #         position=position_dodge(0.5)) +
  geom_bar(stat = "identity", position =position_dodge(0.9)) +
  #geom_text(aes(label=round(avg_completion_rate*100,0)),
  #          size=3.5, color="black", position = position_dodge(0.5)) +
  labs(x = "Chapter", y = "Average progress (%)", 
       fill = "Group",
       title = paste0("Average progress (%) on ",
                    names(progress_list_filtered[length(progress_list_filtered)]))) +
  styling +
  scale_fill_discrete(name = "Group", 
                      labels = c("uu" = paste0("UU staff (n = ", sum(latest_progress_df$group=="uu"), ")"), 
                                 "uu_students" = paste0("UU students (n = ", sum(latest_progress_df$group=="uu_students"), ")"), 
                                 "other" = paste0("Others (n = ", sum(latest_progress_df$group=="other"), ")")))
```

Below, you can see the average progress over time. On July 11th, the ULearning platform got an update. Therefore, from then onwards, the progress for every user was set to 0 again, hence the drop in progress in July 2023.

```{r progress-over-time}
#| code-summary: "See code to plot average progress over time"

# Create an empty list to store the results
avg_progress_pp <- list()

# For each dataframe in the list object progress_over_time
for(dataframe in 1:length(progress_list_cleaned)){
  avg_progress_pp[[dataframe]] <- progress_list_cleaned[[dataframe]] %>%
    # From wide to long format based on the Email address and group
    pivot_longer(cols = -c(Email.address, group), 
                 names_to = "block", 
                 values_to = "completion") %>%
    group_by(Email.address, group) %>%
    # calculate average completion rate per participant
    summarise(progress = mean(completion)) %>%
    # take the date from the list object name and put it in a new date column for all rows in the dataframe
    mutate(date = as.Date(rep(names(progress_list_cleaned)[dataframe], n())))
}

avg_progress_pp_flat <- bind_rows(avg_progress_pp)

# Number of people underlying each average: 
# avg_progress_pp_flat %>% group_by(group, date) %>% summarise(count = n())

# Line and scatter combined
avg_progress_pp_flat %>%
  group_by(group, date) %>%
  summarise(avg_progress = mean(progress) * 100) %>%
  ggplot(aes(x = date, y = avg_progress, color = group)) +
  geom_line(size = 1) +
  geom_point(data = avg_progress_pp_flat, 
             aes(x = date, y = progress*100), 
             alpha = 0.9) + 
  labs(x = "Date", y = "Average Progress (%)", 
       title = "Average Progress Over Time per Group") +
  styling +
  scale_fill_discrete(name = "Group", 
                      labels = c("uu" = "UU staff", 
                                 "uu_students" = "UU students", 
                                 "other" = "Others"))
```

## Quiz results

```{r clean-quiz-data}
#| code-summary: "See code to clean the quiz data"

# Copy progress object to make further edits/cleaning
quiz_list_cleaned <- quiz_list_filtered

# Clean up the quiz dataframes
for(dataframe in 1:length(quiz_list_cleaned)){
  
  # Remove duplicate rows in the dataset: take Finished if the participant has 
  # both a State = Finished and In progress.  
  quiz_list_cleaned[[dataframe]] <- 
    quiz_list_cleaned[[dataframe]] %>%
    group_by(Last.name) %>%
    mutate(has_finished = any(State == "Finished")) %>%
    filter(!((State == "In progress" | State == "In Progress") & has_finished)) %>%
    select(-has_finished)

  # Make character grades numeric, and "-" into NA
  quiz_list_cleaned[[dataframe]][quiz_list_cleaned[[dataframe]] == "-"] <- NA
  quiz_list_cleaned[[dataframe]] <- 
    quiz_list_cleaned[[dataframe]] %>%
    mutate(Grade = as.numeric(Grade.10.0)) %>%
    mutate_at(vars(starts_with("Q..")), 
              as.numeric)
  
  # Create a factor variable for group membership (UU, student or other)
  quiz_list_cleaned[[dataframe]]$group <- as.factor(ifelse(grepl("@uu.nl$",
                                                              quiz_list_cleaned[[dataframe]]$Email.address),
                                                           "uu",
                                                           ifelse(grepl("@students.uu.nl$",
                                                              quiz_list_cleaned[[dataframe]]$Email.address),
                                                              "uu_students",
                                                              "other")))
  
  
  # Rename question columns into something human-readable
colnames(quiz_list_cleaned[[dataframe]]) <- gsub("^Q\\.\\.([0-9]+)\\.\\..*", 
                                 "Q\\1", 
                                 names(quiz_list_cleaned[[dataframe]]))
}
```

Below you can see the average final score on the quiz for the latest quiz 
results.

```{r quiz-latest-grade}
#| code-summary: "See code to plot the latest final grade per group"

# Select the latest quiz file
latest_quiz_df <- quiz_list_cleaned[[length(quiz_list_cleaned)]]

# Plot average quiz grade per group 
latest_quiz_df %>%
  ggplot(aes(x = group, y = mean(Grade, na.rm = TRUE))) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Group", y = "Average grade", 
       title = "Average grade per group") +
  scale_fill_discrete(name = "Group", 
                      labels = c("uu" = paste0("UU staff (n = ", 
                                               sum(latest_progress_df$group=="uu"), ")"), 
                                 "uu_students" = paste0("UU students (n = ",
                                                        sum(latest_progress_df$group=="uu_students"), ")"), 
                                 "other" = paste0("Others (n = ", 
                                                  sum(latest_progress_df$group=="other"), ")"))) +
  styling
```

Below is a table with the average scores (in %) per question in the most recent 
quiz data.

```{r quiz-table}
#| code-summary: "See code to create the table"

# From the latest quiz results, put in a table the average scores (%) per quiz question

# Select the question columns
grade_columns <- grep("^Q", names(latest_quiz_df), value = TRUE)

# Create the table
latest_quiz_df %>%
  ungroup() %>%
  summarise(across(all_of(grade_columns), 
                   ~ round(mean(as.numeric(.), na.rm = TRUE)/0.6*100, 0))) %>%
  t() %>%
  #cbind(rownames(.), .) %>%
  kable(., format = "html",
        col.names = names(.),
        #caption = "Average score per quiz question (%)",
        table.attr = 'cellpadding="3", cellspacing="3"') %>%
  footnote(general = "Average score per quiz question (%)") %>%
  kable_styling(bootstrap_options = c("striped", 
                                      "hover", 
                                      "condensed", 
                                      "responsive"),
                fixed_thead = T,
                full_width = FALSE,
                stripe_color = uucol,
                position = "left"
  )
```

Below you can find the number of attempts (either in Progress or Finished)

```{r quiz-over-time}
#| code-summary: "See code to plot the number of attempts over time"
# Create an empty dataframe to store the combined results
quizovertime <- data.frame(group = character(),
                         attempts = integer(),
                         date = Date(),
                         stringsAsFactors = FALSE)

# Iterate over each dataframe in the list
for (date in names(quiz_list_cleaned)) {
  df <- quiz_list_cleaned[[date]]  # Extract the dataframe
  
  # Extract information from the current dataframe
  groups <- c("uu", "uu_students", "other")
  num_attempts <- c(
    length(df$Last.name[df$group=="uu"]),
    length(df$Last.name[df$group=="uu_students"]),
    length(df$Last.name[df$group=="other"]))
  date <- as.Date(rep(date, 3))
  
  # Create a temporary dataframe for the current group
  temp_df <- data.frame(group = groups,
                        attempts = num_attempts,
                        date = date)
  
  # Append the temporary dataframe to the result dataframe
  quizovertime <- rbind(quizovertime, temp_df)
}

# Line plot
quizovertime %>%
  ggplot(aes(x = date, y = attempts, color = group)) +
  geom_line() +
  geom_point(alpha = 0.7) +
  labs(x = "Date", y = "Number of attempts", title = "Number of quiz attempts made over time per group") +
  styling +
  scale_color_manual(values = UU_pallette)
```
