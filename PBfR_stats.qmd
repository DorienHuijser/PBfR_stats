## About

In this report, you'll find some data on the usage of the online training 
"Privacy Basics for Researchers". This online module was created by Research 
Data Management Support at Utrecht University (NL) to provide a 
researcher-friendly introduction into the General Data Protection Regulation 
(GDPR), with a focus on how it applies to scientific research performed at 
Utrecht University (UU).

A description of and a registration link to the online module can be found on the 
[RDM Support website](https://www.uu.nl/en/research/research-data-management/walk-in-hours-workshops/privacy-basics-online-training).
The module is embedded within the Utrecht University Moodle platform, 
"ULearning", but the raw module materials are also available 
[online via Zenodo](https://doi.org/10.5281/zenodo.7930571).

## Getting, reading and cleaning the data

### Downloading the data

To obtain the data for this report from the ULearning platform, the following 
steps should be followed by a teacher/administrator in the ULearning platform:

##### 1. List of enrolled participants

1.  From course main page, go to Participants.
2.  Set the following selection criteria: Match *All* of the following
    - Match ANY Roles: Student, Guest, Authenticated user, Authenticated user on site home AND
    - Match None Groups: Red
3.  Click "Apply filters"
4.  Select all users
5.  Under "With selected users...", select "Comma-separated values (.csv)"
6.  Save the file in the `raw` folder. Add the date of downloading in the 
downloaded csv file "YYYYMMDD_courseid_838_participants.csv"

##### 2. Progress report

1.  From course main page, go to Reports > Activity completion
2.  Download the file to the spreadsheet format (UTF-8 .csv)
3.  Save the file in the `raw` folder. Add the date of downloading in the 
downloaded csv file "YYYYMMDD_progress.pbfr.csv"

##### 3. Quiz results

1.  From course main page, go to Chapter 6 \| Closing \> Final Quiz
2.  Click "Attempts: \[##\]" (The \## indicating the number of attempts)
3.  Under What to include in the report, select:
    - Attempts from enrolled users who have attempted the quiz
    - Attempts that are In progress, Overdue, Finished, and Never submitted
    - Check Show at most one finished attempt per user (Highest grade)
4.  Under Display options:
    - Make sure Page size is larger than the amount of attempts.
    - Marks for each question: Yes
5.  Click Show report.
6.  Select all participants using the checkbox above the first name in the list.
7.  Download the data as Comma separated values (.csv)
8.  Save the file in the `raw` folder as "YYYYMMDD_PBfR-Quiz.csv".

The data are not shared because they contain personal data (e.g., names, email 
addresses and information about participants' progress in the module).

### Reading and cleaning the data

We first have to read and clean the data to get usable data frames. We don't 
want to include people who were involved in the creation of the course or who 
provided feedback on it; we only need the actual users; people who enrolled 
after the launch of the course with the intention to actually learn something 
new!

```{r load-packages}
#| code-summary: "See code to load packages"
library(tidyverse)
library(ggplot2)
library(data.table)
```

```{r read-all-data}
#| code-summary: "See code to read all data files"
# List all the files in the raw folder including their date
data_files <- data.frame(filename = list.files(path = "raw", pattern = ".csv"))
data_files$filenamedates <- as.Date(str_extract(pattern = "[0-9]+[0-9]+[0-9]+", 
                                                string = data_files$filename),
                                    format = "%Y%m%d")

# Sort by date using data.table::setorder (ascending = most recent file last)
setorder(data_files, filenamedates, na.last = TRUE)

# Select all files of every type (participants, progress or quiz)
participants_files <- data_files %>% filter(str_detect(filename, 
                                                       "courseid_838_participants"))
progress_files <- data_files %>% filter(str_detect(filename, 
                                                   "progress"))
quiz_files <- data_files %>% filter(str_detect(filename, 
                                               "PBfR-Quiz"))

# Function to read in files from the file list and put the dataframes in a list
# with the date as the dataframe / list item name
readfiles <- function(filesvar){
  dataset <- list()
  dataset <- lapply(filesvar$filename, 
                    function(file){
                      read.csv(paste0("raw/", file), header = TRUE)
                      }
                    )
  names(dataset) <- filesvar$filenamedates
  return(dataset)
}

# Read in the participant, progress and quiz files
participants_list <- readfiles(participants_files)
progress_list <- readfiles(progress_files)
quiz_list <- readfiles(quiz_files)
```

```{r select-actual-users}
#| code-summary: "See code to select only relevant participants"

# Filter the most recent dataframe to only contain the correct participants
# i.e. only people who were *not* involved in the creation or reviewing of the
# course; these people are labelled as "Red" in the Groups variable
most_recent_dataframe  <- participants_list[[length(participants_list)]] %>% 
        filter(!(Groups == "Red" & !is.na(Groups)))

# Function to filter the old participants dataframes, and the progress and quiz 
# dataframes, based on the most recent participants list
filterlist <- function(list_to_be_filtered){
  lapply(list_to_be_filtered, 
         function(df){
           filtered_df <- df %>% semi_join(select(most_recent_dataframe, 
                                                  Email.address))
           return(filtered_df)
         })
}

participants_list_filtered <- filterlist(participants_list)
progress_list_filtered <- filterlist(progress_list)
quiz_list_filtered <- filterlist(quiz_list)
```

## Number of participants

```{r n-participants}
#| code-summary: "See code to calculate the number of participants"

# Initialize empty dataframe to be filled in the for-loop
vectorlength = length(participants_list_filtered)
nr_participants <- data.frame(date = vector(length = vectorlength),
                              total = vector(length = vectorlength),
                              uu = vector(length = vectorlength),
                              uu_students = vector(length = vectorlength),
                              other = vector(length = vectorlength))

# For each dataframe in the participants list
for(dataframe in 1:vectorlength){
  # Put the date in the date column of nr_participants dataframe
  nr_participants$date[dataframe] <- names(participants_list_filtered[dataframe])
  
  # Calculate number of total, UU, UU students and other people
  nr_participants$total[dataframe] <- dim(participants_list_filtered[[dataframe]])[1]
  nr_participants$uu[dataframe] <- sum(grepl("@uu.nl$", 
                                             participants_list_filtered[[dataframe]]$Email.address))
  nr_participants$uu_students[dataframe] <- sum(grepl("@students.uu.nl$", 
                                             participants_list_filtered[[dataframe]]$Email.address))
  nr_participants$other[dataframe] <- nr_participants$total[dataframe] - nr_participants$uu[dataframe] - nr_participants$uu_students[dataframe]
}


# Current number of participants
n_participants <- dim(participants_list[[length(participants_list)]])[1]

```

As of `r nr_participants$date[length(nr_participants)]`, there are 
`r nr_participants$total[length(nr_participants)]` enrolled in the course. 
`r nr_participants$uu[length(nr_participants)]` of them are enrolled with their 
"@uu.nl" email address, and `r nr_participants$uu_students[length(nr_participants)]` 
of them with the "@students.uu.nl" email address. 
`r nr_participants$other[length(nr_participants)]` participants are either from 
an external institution or have used a personal email address to enroll in the course.

In the below bar chart, you can see the development of the number of 
participants in the course over time.

```{r plot-participants}
#| code-summary: "See code to plot the participants over time "

# From wide to long
nr_participants_long <- pivot_longer(data = nr_participants, 
                                    cols = c(uu, uu_students, other)
                                    #names_to = "variable",
                                    #values_to = "value"
                                    )

# Convert the "date" column to a proper date format
nr_participants_long$date <- as.Date(nr_participants_long$date)

# Set the order of the variable levels
nr_participants_long$name <- factor(nr_participants_long$name, levels = c("uu", "uu_students", "other"))

# Create a stacked bar plot
# TODO: style so that it looks better!
ggplot(nr_participants_long, aes(x = date, y = value, fill = name)) +
  geom_bar(stat = "identity") +
  labs(title = "Course participants over time",
       x = "Date", y = "Number of participants",
       fill = "Type of participant") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Adjust x-axis labels for better readability
```


## Participants' progress

TODO:

- How many participants completed each block? (Graph)
- How does this go over time?

## Quiz results

TODO:

-   Average grade overall
-   Average grade per quiz question (percentage)

```{r clean-up-quiz-data}
# Only get Started.on from 2023-05-20 onwards
# Delete last row that says "Overall average" under Last.name
```

## Using tabsets

::: panel-tabset
## Block 1

``` r
fizz_buzz <- function(fbnums = 1:50) {
  output <- dplyr::case_when(
    fbnums %% 15 == 0 ~ "FizzBuzz",
    fbnums %% 3 == 0 ~ "Fizz",
    fbnums %% 5 == 0 ~ "Buzz",
    TRUE ~ as.character(fbnums)
  )
  print(output)
}
```

## Block 2

``` python
def fizz_buzz(num):
  if num % 15 == 0:
    print("FizzBuzz")
  elif num % 5 == 0:
    print("Buzz")
  elif num % 3 == 0:
    print("Fizz")
  else:
    print(num)
```
:::
